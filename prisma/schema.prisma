// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model User {
  id             String          @id @default(cuid())
  name           String
  empId          String?         @unique
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?         @db.Text
  role           UserRole        @default(EMPLOYEE)
  disabled       Boolean         @default(false)
  departmentId   String?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      Address[]
  paymentMethods PaymentMethod[]
  reviews        Review[]
  reservations   Reservation[]
  favItems       MenuItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
}

enum OrderStatus {
  NEW
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

enum OrderType {
  DINE_IN
  DELIVERY
  PICKUP
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  type            OrderType     @default(DINE_IN)
  status          OrderStatus   @default(NEW)
  totalAmount     Float
  customerId      String
  customer        User          @relation(fields: [customerId], references: [id])
  addressId       String
  deliveryAddress Address       @relation(fields: [addressId], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  items           OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, addressId, paymentMethodId])
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([orderId, menuItemId])
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Float
  image       String
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  favUserId   String?
  favUser     User?       @relation(fields: [favUserId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]

  @@index([categoryId])
}

model Address {
  id            String  @id @default(cuid())
  streetAddress String
  city          String
  state         String
  postalCode    String
  isDefault     Boolean
  customerId    String
  customer      User    @relation(fields: [customerId], references: [id])
  orders        Order[]

  @@index([customerId])
}

model PaymentMethod {
  id         String  @id @default(cuid())
  cardNumber String
  expiryDate String
  isDefault  Boolean
  customerId String
  customer   User    @relation(fields: [customerId], references: [id])
  orders     Order[]

  @@index([customerId])
}

model Review {
  id         String   @id @default(cuid())
  text       String?  @db.Text
  rating     Float    @default(1)
  customerId String
  customer   User     @relation(fields: [customerId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, menuItemId])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Reservation {
  id              String            @id @default(cuid())
  partySize       Int
  reservationDate DateTime
  specialRequests String?           @db.Text
  status          ReservationStatus @default(PENDING)
  customerId      String
  customer        User              @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  image     String?    @db.Text
  menuItems MenuItem[]
}
