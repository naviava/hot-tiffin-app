// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum GenderType {
  MALE
  FEMALE
  UNSPECIFIED
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  empId          String?       @unique
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole      @default(EMPLOYEE)
  disabled       Boolean       @default(false)
  gender         GenderType    @default(UNSPECIFIED)
  phoneNumber    String?
  dob            DateTime?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      Address[]
  reviews        Review[]
  reservations   Reservation[]
  favourites     Favourite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  NEW
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
  COMPLETED
}

enum OrderType {
  DINE_IN
  DELIVERY
  PICKUP
}

enum PaymentMethodType {
  CASH
  CARD
  E_WALLET
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String            @unique
  type            OrderType         @default(DINE_IN)
  status          OrderStatus       @default(NEW)
  totalPrice      Float
  totalWithTax    Float
  customerNote    String?
  isPaid          Boolean           @default(false)
  paymentMethod   PaymentMethodType @default(CASH)
  ownerId         String            @db.ObjectId
  owner           User              @relation(fields: [ownerId], references: [id])
  addressId       String?           @db.ObjectId
  deliveryAddress Address?          @relation(fields: [addressId], references: [id])
  items           OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId, addressId])
}

model OrderItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity     Int
  price        Float
  customerNote String?
  menuItemId   String   @db.ObjectId
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id])
  orderId      String   @db.ObjectId
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, menuItemId])
}

model MenuItem {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  favourites  Favourite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Favourite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  menuItemId String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, menuItemId])
}

model Address {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  streetAddress String
  city          String
  state         String
  postalCode    String
  isDefault     Boolean @default(false)
  customerId    String  @db.ObjectId
  customer      User    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders        Order[]

  @@index([customerId])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String?
  rating     Float    @default(1)
  customerId String   @db.ObjectId
  customer   User     @relation(fields: [customerId], references: [id])
  menuItemId String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, menuItemId])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Reservation {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  partySize       Int
  reservationDate DateTime
  specialRequests String?
  status          ReservationStatus @default(PENDING)
  customerId      String            @db.ObjectId
  customer        User              @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  image     String?
  menuItems MenuItem[]
}
